use teloxide::types::{
    InlineQueryResultArticle, InputMessageContent, InputMessageContentText, ParseMode,
};

use crate::controllers::{pig, shop};

use crate::db::{economydb, inventorydb};
use crate::handlers::keyboard;
use crate::StoragePool;

use super::keyboard::make_duel;

pub async fn inline_hryak_info_article(
    pool: &StoragePool,
    user_id: u64,
) -> anyhow::Result<InlineQueryResultArticle> {
    let pig = pig::get_pig(pool, user_id).await?;

    let hrundel_weight = make_article(
        "hryak",
        "üê∑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä—è–∫–µ",
        &format!(
            "üìå *–ò–º—è —Ö—Ä—è–∫–∞:* `{}`\n‚öñÔ∏è *–í–µ—Å:* `{}` –∫–≥\n‚öîÔ∏è *–ê—Ç–∞–∫–∞:* `{}`\nüõ° *–ó–∞—â–∏—Ç–∞:* `{}`",
            pig.name, pig.weight, pig.attack, pig.defense
        ),
        "üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ö—Ä—è–∫–µ",
        "https://sputnik.kz/img/858/06/8580645_0:0:3117:2048_600x0_80_0_1_81d5b1f42e05e39353aa388a4e55cb34.jpg".into(),
    );

    Ok(hrundel_weight)
}

pub fn inline_help_article() -> InlineQueryResultArticle {
    let help_text = "üê∑ *–•—Ä—è–∫–æ–±–æ—Ç ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏—Ä —Ö—Ä—è–∫–æ–≤!*\n\
        \n\
        –í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞, —É–ª—É—á—à–∞—Ç—å –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, \
        —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ –¥—É—ç–ª—è—Ö —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏.\n\
        \n\
        üéÆ –ü–æ–º–∏–º–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –¥–æ—Å—Ç—É–ø–Ω—ã –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –∞–∑–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:\n\
        \n\
        üí∞ /daily ‚Äî –∑–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥\n\
        üèÅ /race ‚Äî –º–∏–Ω–∏-–∏–≥—Ä–∞ \"–ì–æ–Ω–∫–∏ —Å–≤–∏–Ω–µ–π\"\n\
        üèÜ /treasurehunt ‚Äî –º–∏–Ω–∏-–∏–≥—Ä–∞ \"–û—Ö–æ—Ç–∞ –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏\"\n\
        üé≤ /guess ‚Äî –º–∏–Ω–∏-–∏–≥—Ä–∞ \"–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\"\n\
        \n\
        ‚ö†Ô∏è *–í–∞–∂–Ω–æ!* –í –∞–∑–∞—Ä—Ç–Ω—ã—Ö –∏–≥—Ä–∞—Ö –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å \
        —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–û—Ç–≤–µ—á–∞—Ç—å –Ω—É–∂–Ω–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞). –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ *–æ—Ç–º–µ–Ω–∞*.\n\
        \n\
        ";

    InlineQueryResultArticle::new(
        "help".to_string(),
        "üê∑ –•—Ä—è–∫–æ–±–æ—Ç ‚Äî –ø–æ–º–æ—â—å".to_string(),
        InputMessageContent::Text(
            InputMessageContentText::new(help_text)
                .parse_mode(ParseMode::Markdown),
        ),
    )
    .description("–í—ã—Ä–∞—â–∏–≤–∞–π—Ç–µ —Ö—Ä—è–∫–∞, —É–ª—É—á—à–∞–π—Ç–µ –µ–≥–æ –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ –≤ –¥—É—ç–ª—è—Ö!")
    .thumbnail_url(
        "https://i.fbcd.co/products/original/8f367041dd093caa1b1fcdecfb5f958ffdd3ab33cab7a16c10dc3bc134ca4e96.jpg"
            .parse()
            .unwrap(),
    )
    .reply_markup(keyboard::make_more_info_keyboard())
}

pub async fn inline_shop_article(pool: &StoragePool) -> anyhow::Result<InlineQueryResultArticle> {
    let offers = shop::get_daily_offers();
    let (kb, text) = keyboard::make_shop(&offers, pool).await?;

    Ok(InlineQueryResultArticle::new(
        "shop".to_string(),
        "üõí –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π".to_string(),
        InputMessageContent::Text(InputMessageContentText::new(text)),
    )
    .description("–õ—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–Ω—è! üéâ")
    .thumbnail_url(
        "https://static.wixstatic.com/media/3fe122_9085e9ea57114eb7b32ffc32f49c34bf~mv2.jpg/v1/fill/w_266,h_354,al_c,q_80,usm_0.66_1.00_0.01,enc_avif,quality_auto/3fe122_9085e9ea57114eb7b32ffc32f49c34bf~mv2.jpg"
            .parse()
            .unwrap(),
    )
    .reply_markup(kb))
}

pub fn inline_name_article() -> InlineQueryResultArticle {
    make_article(
        "name_ch",
        "–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è —É —Ö—Ä—è–∫–∞",
        "–í–≤–µ–¥–∏—Ç–µ '–∏–º—è <—Ç–µ–∫—Å—Ç>'",
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–ª –∏ –∏–º—è",
        "https://www.lifewithpigs.com/uploads/7/7/7/1/77712458/published/luckpig.png?1518827974"
            .into(),
    )
}

pub fn inline_change_name_article(new_name: &str) -> InlineQueryResultArticle {
    let new_name = if new_name.is_empty() {
        "Unnamed"
    } else {
        new_name
    };
    make_article(
        "change_name",
        &format!("–ú–µ–Ω—è–µ–º –∏–º—è —É —Ö—Ä—è–∫–∞ –Ω–∞ {}...", new_name),
        &format!("–ò–º—è —Ö—Ä—é–Ω–¥–µ–ª—è –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {} ‚úÖ", new_name),
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∏–º—è",
        "https://media.licdn.com/dms/image/v2/C4E12AQHOTlp8TuFzxg/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1520148182297?e=1743033600&v=beta&t=3zE1S7YVIL8QQ7JCyuSvy6Flj9Bm_27l6mRLJmU3Lzo".into(),
    )
}

pub async fn inline_duel_article(
    pool: &StoragePool,
    duel_host_id: u64,
    duel_host_mention: String,
    bid: f64,
) -> anyhow::Result<InlineQueryResultArticle> {
    let user_balance = economydb::balance(pool, duel_host_id).await?;
    if user_balance < bid {
        let message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É—ç–ª–∏!";

        let n_money = make_article("not_enough_money",
            "–û—à–∏–±–∫–∞!",
            message,
            message,
            "https://avatars.mds.yandex.net/get-shedevrum/11552302/b56a5e87c2af11ee8ba7be62f04505c7/orig".into());

        return Ok(n_money);
    }

    let name = InlineQueryResultArticle::new(
        "duel",
        "–î—É—ç–ª—å",
        InputMessageContent::Text(InputMessageContentText::new(
            format!("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥—É—ç–ª—å!\n–°—Ç–∞–≤–∫–∞ {}$", bid)
        )),
    )
    .description(format!("–°–≤–∏–Ω–æ–¥—É—ç–ª—å. –°—Ç–∞–≤–∫–∞ {}$", bid))
    .thumbnail_url(
        "https://avatars.mds.yandex.net/get-shedevrum/11552302/b56a5e87c2af11ee8ba7be62f04505c7/orig"
            .parse()
            .unwrap(),
    )
    .reply_markup(make_duel(duel_host_id, duel_host_mention, bid));
    Ok(name)
}

pub async fn inline_balance_article(
    pool: &StoragePool,
    user_id: u64,
) -> anyhow::Result<InlineQueryResultArticle> {
    let balance = economydb::balance(pool, user_id).await?;
    let daily_income = economydb::daily_income(pool, user_id).await?;

    let message = format!(
        "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* `{}`$\nüìà *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥:* `{}`$",
        balance, daily_income
    );

    let balance_article = InlineQueryResultArticle::new(
        "balance",
        "üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å",
        InputMessageContent::Text(
            InputMessageContentText::new(message).parse_mode(ParseMode::MarkdownV2),
        ),
    )
    .description("üìä –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å")
    .thumbnail_url(
        "https://ih1.redbubble.net/image.5250551209.9937/flat,750x,075,f-pad,750x1000,f8f8f8.webp"
            .parse()
            .unwrap(),
    );

    Ok(balance_article)
}
#[inline]
pub fn make_article(
    id: &str,
    title: &str,
    content: &str,
    description: &str,
    url: Option<&str>,
) -> InlineQueryResultArticle {
    InlineQueryResultArticle::new(
        id,
        title,
        InputMessageContent::Text(InputMessageContentText::new(content).parse_mode(ParseMode::Markdown)),
    )
    .description(description)
    .thumbnail_url(url.unwrap_or("https://media.istockphoto.com/id/956025942/photo/newborn-piglet-on-spring-green-grass-on-a-farm.jpg?s=612x612&w=0&k=20&c=H01c3cbV4jozkEHvyathjQL1DtKx6mOd5s7NwACUJwA=").parse().unwrap())
}

pub async fn inventory_article(
    pool: &StoragePool,
    user_id: u64,
) -> anyhow::Result<InlineQueryResultArticle> {
    let invslots = inventorydb::invslots_all(pool, user_id).await?;

    let mut message = String::from("üì¶ *–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n\n");

    if invslots.is_empty() {
        message.push_str("üîπ _–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç._");
    }

    for invslot in invslots {
        message += &format!("‚ñ´Ô∏è *{}* ‚Äî `{}`x\n", invslot.title, invslot.usages);
    }

    Ok(make_article(
        "inventory",
        "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        &message,
        "üîç –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å",
        "https://imgcdn.stablediffusionweb.com/2024/9/5/c1685066-c25b-46c1-9700-b5e2b81d9603.jpg"
            .into(),
    ))
}

pub fn duel_info_article() -> InlineQueryResultArticle {
    let duel_msg = String::from(
        "‚öîÔ∏è *–î—É—ç–ª–∏* ‚Äî —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–∞—è –º–∏–Ω–∏-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!\n\
        \n\
        üéØ –í–æ –≤—Ä–µ–º—è –¥—É—ç–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –≤—ã–±–æ—Ä:\n\
        - üó° **–ê—Ç–∞–∫–æ–≤–∞—Ç—å**\n\
        - üõ° **–ó–∞—â–∏—â–∞—Ç—å—Å—è**\n\
        \n\
        üèÜ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *–±—É—Å—Ç—ã* –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!\n\
        \n\
        üî• –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥—É—ç–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\
        `@hryak_zovbot duel [—Å—Ç–∞–≤–∫–∞-—á–∏—Å–ª–æ]`\n\
        –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
    );

    make_article(
        "duel-info",
        "üõ°Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—É—ç–ª—è—Ö",
        &duel_msg,
        "üìú –£–∑–Ω–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å—Ä–∞–∂–µ–Ω–∏–µ!",
        "https://static.wikia.nocookie.net/marvelcinematicuniverse/images/a/a0/War_Pig_Infobox.png/revision/latest?cb=20230905065042".into(),
    )
    .reply_markup(keyboard::make_duel_options())
}
